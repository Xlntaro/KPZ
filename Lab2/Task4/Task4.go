package main

import (
	"fmt"
)

// Virus ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ—Ä—É—Å—É
type Virus struct {
	Name     string
	Type     string
	Age      int
	Weight   float64
	Children []*Virus
}

// Clone —Å—Ç–≤–æ—Ä—é—î –≥–ª–∏–±–æ–∫—É –∫–æ–ø—ñ—é –≤—ñ—Ä—É—Å—É, –≤–∫–ª—é—á–∞—é—á–∏ –≤—Å—ñ—Ö –π–æ–≥–æ –¥—ñ—Ç–µ–π
func (v *Virus) Clone() *Virus {
	// –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –≤—ñ—Ä—É—Å—É
	clone := &Virus{
		Name:   v.Name + "_clone",
		Type:   v.Type,
		Age:    v.Age,
		Weight: v.Weight,
	}

	// –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –¥—ñ—Ç–µ–π (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)
	for _, child := range v.Children {
		clonedChild := child.Clone()
		clone.Children = append(clone.Children, clonedChild)
	}

	return clone
}

// PrintHierarchy —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–∏–≤–æ–¥–∏—Ç—å —ñ—î—Ä–∞—Ä—Ö—ñ—é –≤—ñ—Ä—É—Å—ñ–≤
func (v *Virus) PrintHierarchy(level int) {
	indent := ""
	for i := 0; i < level; i++ {
		indent += "  "
	}
	fmt.Printf("%s- %s (–í–∏–¥: %s, –í—ñ–∫: %d, –í–∞–≥–∞: %.2f)\n", indent, v.Name, v.Type, v.Age, v.Weight)
	for _, child := range v.Children {
		child.PrintHierarchy(level + 1)
	}
}

func main() {
	// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—ñ–º–µ–π—Å—Ç–≤–∞ –≤—ñ—Ä—É—Å—ñ–≤ (3 –ø–æ–∫–æ–ª—ñ–Ω–Ω—è)
	parent := &Virus{Name: "Alpha", Type: "Corona", Age: 5, Weight: 1.2}
	child1 := &Virus{Name: "Beta", Type: "Corona", Age: 2, Weight: 0.8}
	child2 := &Virus{Name: "Gamma", Type: "Corona", Age: 1, Weight: 0.5}
	grandchild := &Virus{Name: "Delta", Type: "Corona", Age: 0, Weight: 0.3}

	// –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —ñ—î—Ä–∞—Ä—Ö—ñ—ó
	child1.Children = append(child1.Children, grandchild)
	parent.Children = append(parent.Children, child1, child2)

	// –í–∏–≤—ñ–¥ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—ó —ñ—î—Ä–∞—Ä—Ö—ñ—ó
	fmt.Println("üåø –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —ñ—î—Ä–∞—Ä—Ö—ñ—è –≤—ñ—Ä—É—Å—ñ–≤:")
	parent.PrintHierarchy(0)

	// –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è
	cloneParent := parent.Clone()

	// –í–∏–≤—ñ–¥ –∫–ª–æ–Ω–æ–≤–∞–Ω–æ—ó —ñ—î—Ä–∞—Ä—Ö—ñ—ó
	fmt.Println("\nüß¨ –ö–ª–æ–Ω–æ–≤–∞–Ω–∞ —ñ—î—Ä–∞—Ä—Ö—ñ—è –≤—ñ—Ä—É—Å—ñ–≤:")
	cloneParent.PrintHierarchy(0)
}
